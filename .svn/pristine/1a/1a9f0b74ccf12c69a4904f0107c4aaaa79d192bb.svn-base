/**
 * author: Triones
 * date  : 2014-08-21
 * desc  :网络数据缓存队列
 */

#ifndef _TRIONES_DATAQUEUE_H__
#define _TRIONES_DATAQUEUE_H__

#include "../thread/queuethread.h"

namespace triones
{
template<typename T>
class CDataQueue: public IPackQueue
{
public:
	CDataQueue(int maxsize = -1) :
			_max(maxsize)
	{
		_head = _tail = NULL;
		_size = 0;
	}
	~CDataQueue()
	{
		Clear();
	}

	bool Push(void *data)
	{
		T *pack = (T *) data;
		if (_size > _max && _max > 0)
		{
			return false;
		}

		if (_head == NULL)
		{
			_head = _tail = pack;
		} else
		{
			_tail->_next = pack;
			_tail = pack;
		}
		_tail->_next = NULL;

		++_size;

		return true;
	}

	void * Pop(void)
	{
		if (_size == 0 || _head == NULL)
		{
			return NULL;
		}

		T *pack = _head;
		if (_head == _tail)
		{
			_head = _tail = NULL;
		} else
		{
			_head = _head->_next;
		}
		--_size;
		return (void*) pack;
	}

	void Free(void *packet)
	{
		if (packet == NULL) return;
		delete (T*) packet;
	}
	int Size(void)
	{
		return _size;
	}

protected:
	void Clear()
	{
		if (_size == 0 || _head == NULL)
		{
			return;
		}

		T *pre, *p = _head;
		while (p != NULL)
		{
			pre = p;
			p = p->_next;
			delete pre;
		}
		_head = NULL;
		_tail = NULL;
		_size = 0;
	}

protected:
	int _max;
	int _size;
	T * _head;
	T * _tail;
};

}
#endif /* _TRIONES_DATAQUEUE_H_*/
