/**
 * author: Triones
 * date  : 2014-08-27
 * desc  : udp 传输封装
 */

#ifndef _TRIONES_UDP_TRANSPORT_H
#define _TRIONES_UDP_TRANSPORT_H

#include "common.h"
#include "socket.h"
#include "epolldispatcher.h"
#include "../pack/tprotocol.h"
#include "eventreactor.h"
#include "../log/comlog.h"

namespace triones
{
class UdpTransPort
{
public:
	UdpTransPort();

	virtual ~UdpTransPort();

	bool start(IEventReactor *reactor, TransProtocol* protocol);

	bool stop();

	bool udp_svr_startup(const char *ip, unsigned short port, int thread_num = 1);

	UdpSocket* udp_cl_connect(char*peer_ip, int peer_port, int local_port, int thread_num = 1);

	int send_msg(Socket* sock, const char* data_buf, int len);
private:
	//udp cl 、svr 通用事件分发模型
	EpollDispatcher _epoll_dispatcher;
	//分发模型包含的workthread 个数
	int _thread_num;
	//事件分发器指针
	IEventReactor *_event_reactor;
	//解封包实现
	TransProtocol* _sock_protocol;
	//udp svr 启动标志
	bool _svr_startup;
	//udp cl 启动标志
	bool _cl_startup;
};
}
#endif /* _TRIONES_UDP_TRANSPORT_H */
