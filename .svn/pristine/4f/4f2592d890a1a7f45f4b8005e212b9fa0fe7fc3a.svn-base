/**
 * author: Triones
 * date  : 2014-08-21
 * desc  : epoll 事件封装װ
 */

#include <stdlib.h>
#include <sys/epoll.h>
#include <errno.h>
#include <sys/resource.h>
#include <arpa/inet.h>
#include "socket.h"
#include "epollhandler.h"
#include "eventworkthread.h"
#include "../log/comlog.h"
#include "../utils/debug.h"

static int convert_epoll_event(int epoll_event)
{
	int e = 0;
    if(epoll_event & EPOLLIN)
    	e |= EV_READ;
    if(epoll_event & EPOLLOUT)
    	e |= EV_WRITE;

    return e;
}

EpollHandler::EpollHandler(int max_event /* = MAX_EPOLL_EVENT */)
{
    _max_event = max_event;
    _inited = false;
    _events_num = 0;
    _events = NULL;
    _epoll_fd = -1;
}

EpollHandler::~EpollHandler()
{
    if(_epoll_fd > 0)
    {
    	::close(_epoll_fd);
    	_epoll_fd = -1;
    }

    if(_events != NULL)
    {
    	free(_events);
    	_events = NULL;
    }
}

bool EpollHandler::init()
{
	if(!_inited)
	{
		_epoll_fd = epoll_create(_max_event);
        if(_epoll_fd < 0)
        {
        	OUT_ERROR(NULL,0,NULL,"epoll_create error : %s", strerror(errno));
        	return false;
        }

        _events_num = min<int>(_max_event, 10240);

        _events = (epoll_event*)malloc(sizeof(struct epoll_event) * _events_num);
        if(_events == NULL)
        {
        	OUT_ERROR(NULL,0,NULL,"epoll_create event error : %s", strerror(errno));
            ::close(_epoll_fd);
            return false;
        }

        _inited = true;
	}

    return true;
}

bool EpollHandler::add_event(Socket *socket, bool enableRead, bool enableWrite)
{
    if(!init())
    	return false;

    struct epoll_event ev;
    memset(&ev, 0, sizeof(ev));
    ev.data.ptr = socket;
    // 设置要处理的事件类型
    ev.events = 0;

    if (enableRead) {
        ev.events |= EPOLLIN;
    }
    if (enableWrite) {
        ev.events |= EPOLLOUT;
    } 
    ev.events |= EPOLLERR;
    bool rc = (epoll_ctl(_epoll_fd, EPOLL_CTL_ADD, socket->_fd, &ev) == 0);
    if(!rc)
    {
    	OUT_ERROR(NULL,0,NULL,"add fd[%d] to epoll error : %s",socket->_fd,strerror(errno));
    }

    return rc;
}

bool EpollHandler::set_event(Socket *socket, bool enableRead, bool enableWrite)
{
    if(!init())
    	return false;

    struct epoll_event ev;
    memset(&ev, 0, sizeof(ev));
    ev.data.ptr = socket;
    // 设置要处理的事件类型
    ev.events = 0;

    if (enableRead) {
        ev.events |= EPOLLIN;
    }
    if (enableWrite) {
        ev.events |= EPOLLOUT;
    }

    bool rc = (epoll_ctl(_epoll_fd, EPOLL_CTL_MOD, socket->_fd, &ev) == 0);
    if(!rc)
    {
    	OUT_ERROR(NULL,0,NULL," modify fd[%d] epoll state error: %s", socket->_fd,strerror(errno));
    }

    return rc;
}

bool EpollHandler::remove(Socket *socket)
{
    if(!init())
    	return false;

    struct epoll_event ev;
    memset(&ev, 0, sizeof(ev));
    ev.data.ptr = socket;
    ev.events = 0;
 
    bool rc = (epoll_ctl(_epoll_fd, EPOLL_CTL_DEL, socket->_fd, &ev) == 0);
    if(!rc)
    {
    	OUT_ERROR(NULL,0,NULL," del fd[%d] from epoll  error: %s", socket->_fd,strerror(errno));
    }

    return rc;
}

int EpollHandler::dispatch(int timeout)
{
    if(!init())
    	return false;
	
	Socket* _socket = NULL;
	int eventType = 0;
    int res =::epoll_wait(_epoll_fd, _events, _events_num, timeout);
	if (res == -1)
	{
        OUT_ERROR(NULL,0,NULL,"epoll_wait error : %s", strerror(errno));
        return errno != EINTR ? 0 : -1 ;
	}
	else if(res == 0)
	{
        // OUT_ERROR(NULL,0,NULL,"epoll_wait timeout");
		return EV_TIMEOUT;
	}
	else
	{
		for(int i = 0; i < res; i++)
		{	
			_socket = (Socket*)(_events[i].data.ptr);
			eventType = convert_epoll_event(_events[i].events);	
			_socket->event_process(eventType);
		}
	}

	return 0;
}
