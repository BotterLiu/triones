/**
 * author: Triones
 * date  : 2014-08-21
 * desc  : epoll work thread
 */

#include "epollhandler.h"
#include "eventworkthread.h"

EventWorkThread::~EventWorkThread()
{
	stop();	
	if(NULL != _epoll_handler)
	{
		delete _epoll_handler;
		_epoll_handler = NULL;
	}

	if(NULL != _sock_mgr)
	{
		delete _sock_mgr;
		_sock_mgr = NULL;
	}
}

void EventWorkThread::set_thread_id(int id)
{
	_thread_index = id;
}

int EventWorkThread::get_thread_id()
{
	return _thread_index;
}

int EventWorkThread::init(int max_sock)
{
	_sock_mgr = new SocketMgr(this);
	_epoll_handler = new EpollHandler(1024);
	_work_thread.init(1,this,this);
	_max_sock = max_sock;
    return 0;
}

int EventWorkThread::start()
{
   _run = true;
   _work_thread.start();
   return true;
}

void EventWorkThread::run( void *param )
{
	param = NULL;
	event_loop();
    return;
}

bool EventWorkThread::add_event(Socket *socket, bool read, bool write)
{  	
	return _epoll_handler->add_event(socket, read, write);
}

bool EventWorkThread::set_event(Socket *socket, bool read, bool write)
{ 
	return _epoll_handler->set_event(socket, read, write);
}

bool EventWorkThread::remove(Socket *socket)
{	
    return _epoll_handler->remove(socket);
}

int EventWorkThread::event_loop()
{ 
	while (_run)
	{
		online_process();
		reconn_process();
		_epoll_handler->dispatch(1000);
	}

    return 0;
}

int EventWorkThread::stop()
{
    _run = false;
    return 0;
}

void EventWorkThread::on_disconnected(Socket *socket)
{	
	/*-----------------------------------------------------------------------------
	 * _need_rec 为 true,则其为 client socket,放入重连队列
	 *			 为 false,放入延迟释放队列
	 *-----------------------------------------------------------------------------*/
	bool _need_rec = socket->_need_reconn;
	if(_need_rec)
	{
		_sock_mgr->del_online_socket(socket);
		_sock_mgr->add_recon_socket(socket);	
	}
	else
	{	
		_sock_mgr->del_online_socket(socket);
	}
}

void EventWorkThread::on_connected(Socket *socket)
{	
	/*-----------------------------------------------------------------------------
	 *  connect to server success
	 *-----------------------------------------------------------------------------*/
	_sock_mgr->del_recon_socket(socket);
	_sock_mgr->add_online_socket(socket);
}

//重连操作
void EventWorkThread::reconn_process()
{
	_sock_mgr->reconn_process();	
}

void EventWorkThread::online_process()
{
	_sock_mgr->online_process();
}
