/**
 * author: Triones
 * date  : 2014-08-21
 * desc  : socket 对象池
 */

#include "socketpool.h"

enum MOUNT_QUEUE_TYPE
{
	INUSE, RECYCLE, MOUNT_QUEUE_TYPE_TYPE_NUM
};

SocketPool::SocketPool()
{
	_recycle_queue_size = 0;
	_inuse_queue_size = 0;
}

SocketPool::~SocketPool()
{
	destroy();
}

Socket *SocketPool::get(int type)
{
	Guard _lock(_mutex);

	Socket *socket = NULL;

	if (_recycle_queue[type].size() == 0)
	{
		socket = sock_new(type);
	} else
	{
		socket = _recycle_queue[type].pop();
		_recycle_queue_size--;
	}

	_inuse_queue_size++;
	//引用计数+1
//	socket->add_ref();

	return socket;
}

void SocketPool::recycle(Socket *socket)
{
	Guard _lock(_mutex);
	//引用计数-1
//	socket->release();
	_recycle_queue[socket->_sock_type].push(socket);
	_recycle_queue_size++;

	return;
}

Socket *SocketPool::sock_new(int type)
{
	Socket* _sock = NULL;
	switch (type)
	{
		case TCPLISTEN:
		{
			_sock = (Socket*) new TcpListenSocket;
			break;
		}
		case UDPSOCK:
		{
			_sock = (Socket*) new UdpSocket;
			break;
		}
		case TCPSVRCONN:
		case TCPCLIENTCONN:
		{
			_sock = (Socket*) new TcpSocket;
			break;
		}
		default:
		{
			_sock = NULL;
			break;
		}
	}
	return _sock;
}

void SocketPool::destroy()
{
	Guard _lock(_mutex);

	for (int i = 0; i < SOCKTYPE_NUM; i++)
	{
		_recycle_queue[i].clear();
	}
}
