/**
 * author: Triones
 * date  : 2014-08-21
 * desc  : socket 对象池 
 */

#ifndef _TRIONES_SOCKPOOL_H_
#define _TRIONES_SOCKPOOL_H_

#include "socket.h"
#include "tcplistensocket.h"
#include "tcpsocket.h"
#include "udpsocket.h"
#include "../thread/mutex.h"

class SocketPool
{
public:

    typedef TQueue<Socket> SockQueue;

	SocketPool();

	virtual ~SocketPool();
	/*-----------------------------------------------------------------------------
	 * 单例类实现 
	 *-----------------------------------------------------------------------------*/
	static SocketPool &instance()
	{
		static SocketPool instance;
		return instance;
	}

	Socket *get(int type);

	void recycle(Socket *socket);

	int size()
	{
		Guard  _lock(_mutex);
		return _recycle_queue_size + _inuse_queue_size;
	}

	int inuse_size()
	{
		Guard  _lock(_mutex);

		return _inuse_queue_size;
	}

	int recycle_size()
	{
		Guard  _lock(_mutex);

		return _recycle_queue_size;
	}

	void destroy();
private:
	Socket *sock_new(int type);	

private:
	int _mount_queue;

	int _inuse_queue_size;

	int _recycle_queue_size;

	TQueue<Socket> _recycle_queue[SOCKTYPE_NUM];

	Mutex  _mutex;
};
#endif /* _TRIONES_SOCKPOOL_H_*/
